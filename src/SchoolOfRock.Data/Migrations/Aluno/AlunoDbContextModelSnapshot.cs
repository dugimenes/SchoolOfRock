// <auto-generated />
using System;
using Aluno.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SchoolOfRock.Data.Migrations.Aluno
{
    [DbContext(typeof(AlunoDbContext))]
    partial class AlunoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Certificado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("CursoId", "AlunoId")
                        .IsUnique();

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Matricula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataMatricula")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("CursoId", "AlunoId")
                        .IsUnique();

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Aluno", b =>
                {
                    b.OwnsOne("Aluno.Domain.AggregateModel.DadosCartao", "DadosCartao", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Cvv")
                                .HasColumnType("TEXT")
                                .HasColumnName("CartaoCvv");

                            b1.Property<string>("Expiracao")
                                .HasColumnType("TEXT")
                                .HasColumnName("CartaoExpiracao");

                            b1.Property<string>("NomeTitular")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("CartaoNomeTitular");

                            b1.Property<string>("Numero")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("CartaoNumero");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");
                        });

                    b.OwnsOne("Aluno.Domain.AggregateModel.HistoricoAprendizado", "HistoricoAprendizado", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("TEXT");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");

                            b1.OwnsMany("Aluno.Domain.AggregateModel.AulaConcluida", "AulasConcluidas", b2 =>
                                {
                                    b2.Property<Guid>("AulaId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("AulaId");

                                    b2.Property<Guid>("AlunoId")
                                        .HasColumnType("TEXT");

                                    b2.Property<DateTime>("DataConclusao")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("DataConclusao");

                                    b2.HasKey("AulaId", "AlunoId");

                                    b2.HasIndex("AlunoId");

                                    b2.ToTable("AulaConcluida");

                                    b2.WithOwner()
                                        .HasForeignKey("AlunoId");
                                });

                            b1.Navigation("AulasConcluidas");
                        });

                    b.Navigation("DadosCartao")
                        .IsRequired();

                    b.Navigation("HistoricoAprendizado")
                        .IsRequired();
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Certificado", b =>
                {
                    b.HasOne("Aluno.Domain.AggregateModel.Aluno", null)
                        .WithMany("Certificados")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Matricula", b =>
                {
                    b.HasOne("Aluno.Domain.AggregateModel.Aluno", null)
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aluno.Domain.AggregateModel.Aluno", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
